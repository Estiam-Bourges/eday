generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       UserRole? @default(USER)
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // Relations pour la boîte à idées
  ideas      Idea[]
  comments   Comment[]
  votes      Vote[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Idea {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(100)
  description String     @db.VarChar(1000)
  status      IdeaStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]

  @@map("idea")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(500)
  createdAt DateTime @default(now())
  ideaId    String
  authorId  String
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Vote {
  id     String   @id @default(cuid())
  type   VoteType
  ideaId String
  userId String
  idea   Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ideaId, userId])
  @@map("vote")
}

enum UserRole {
  USER
  ADMIN
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum VoteType {
  UP
  DOWN
}
